// Mocks generated by Mockito 5.4.6 from annotations
// in skyscraper/test/providers/timeline_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:typed_data' as _i7;

import 'package:atproto/atproto.dart' as _i3;
import 'package:bluesky/bluesky.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:skyscraper/api/bluesky_service.dart' as _i4;
import 'package:skyscraper/models/timeline.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTimeline_0 extends _i1.SmartFake implements _i2.Timeline {
  _FakeTimeline_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStrongRef_1 extends _i1.SmartFake implements _i3.StrongRef {
  _FakeStrongRef_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBlobData_2 extends _i1.SmartFake implements _i3.BlobData {
  _FakeBlobData_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [BlueskyService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBlueskyService extends _i1.Mock implements _i4.BlueskyService {
  MockBlueskyService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Timeline> findTimeline({String? cursor, int? limit}) =>
      (super.noSuchMethod(
            Invocation.method(#findTimeline, [], {
              #cursor: cursor,
              #limit: limit,
            }),
            returnValue: _i5.Future<_i2.Timeline>.value(
              _FakeTimeline_0(
                this,
                Invocation.method(#findTimeline, [], {
                  #cursor: cursor,
                  #limit: limit,
                }),
              ),
            ),
          )
          as _i5.Future<_i2.Timeline>);

  @override
  _i5.Future<_i3.StrongRef> createPost(String? text, {_i6.Embed? embed}) =>
      (super.noSuchMethod(
            Invocation.method(#createPost, [text], {#embed: embed}),
            returnValue: _i5.Future<_i3.StrongRef>.value(
              _FakeStrongRef_1(
                this,
                Invocation.method(#createPost, [text], {#embed: embed}),
              ),
            ),
          )
          as _i5.Future<_i3.StrongRef>);

  @override
  _i5.Future<_i3.BlobData> uploadBlob(_i7.Uint8List? bytes) =>
      (super.noSuchMethod(
            Invocation.method(#uploadBlob, [bytes]),
            returnValue: _i5.Future<_i3.BlobData>.value(
              _FakeBlobData_2(this, Invocation.method(#uploadBlob, [bytes])),
            ),
          )
          as _i5.Future<_i3.BlobData>);

  @override
  _i5.Future<_i3.StrongRef> likePost(String? uri, String? cid) =>
      (super.noSuchMethod(
            Invocation.method(#likePost, [uri, cid]),
            returnValue: _i5.Future<_i3.StrongRef>.value(
              _FakeStrongRef_1(this, Invocation.method(#likePost, [uri, cid])),
            ),
          )
          as _i5.Future<_i3.StrongRef>);

  @override
  _i5.Future<void> deleteLike(String? uri) =>
      (super.noSuchMethod(
            Invocation.method(#deleteLike, [uri]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
